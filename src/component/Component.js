import React from 'react';


function Component() {
  return (
    <div>
      <h1>Компоненты</h1>
      <p>Компоненты позволяют разбить интерфейс на независимые части, про которые легко думать в отдельности. Их можно складывать вместе и использовать несколько раз. На этой странице мы ознакомимся с самой идеей компонентов — детальное описание API находится здесь.</p>
      <p>Во многом компоненты ведут себя как обычные функции JavaScript. Они принимают произвольные входные данные (так называемые «пропсы») и возвращают React-элементы, описывающие, что мы хотим увидеть на экране.</p>

      <h2>Функциональные и классовые компоненты</h2>
      <p>Проще всего объявить React-компонент как функцию:</p>

      <pre>{`
function Welcome(props) {
    return <h1>Привет, {props.name}</h1>;
  }
`}</pre>

      <p>Эта функция — компонент, потому что она получает данные в одном объекте («пропсы») в качестве параметра и возвращает React-элемент. Мы будем называть такие компоненты «функциональными», так как они буквально являются функциями.</p>
      <p>Ещё компоненты можно определять как классы ES6:</p>

      <pre>{`
class Welcome extends React.Component {
    render() {
      return <h1>Привет, {this.props.name}</h1>;
    }
  }
`}</pre>

      <p>С точки зрения React, эти два компонента эквивалентны.</p>
      <p>Функциональным и классовым компонентам доступны дополнительные возможности, о которых мы поговорим в следующих главах.</p>

      <h2>Как отрендерить компонент</h2>
      <p>Пока что мы только встречали React-элементы, представляющие собой DOM-теги:</p>

      <pre>{`
const element = <div />;
`}</pre>

      <p>Но элементы могут описывать и наши собственные компоненты:</p>
      <pre>{`
const element = <Welcome name="Алиса" />;
`}</pre>

      <p>Когда React встречает подобный элемент, он собирает все JSX-атрибуты и дочерние элементы в один объект и передаёт их нашему компоненту. Этот объект называется «пропсы» (props).</p>
      <p>Например, этот компонент выведет «Привет, Алиса» на страницу:</p>
      <pre>{`
function Welcome(props) {
    return <h1>Привет, {props.name}</h1>;
  }
  
  const root = ReactDOM.createRoot(document.getElementById('root'));
  const element = <Welcome name="Алиса" />;
  root.render(element);
`}</pre>
      <p>Давайте разберём, что именно здесь происходит:</p>
      <p>Мы вызываем root.render() c React-элементом Welcome name="Алиса"/.</p>
      <p>React вызывает наш компонент Welcome с пропсами name: 'Алиса'.</p>
      <p>Наш компонент Welcome возвращает элемент h1 Привет, Алиса /h1 в качестве результата.</p>
      <p>React DOM делает минимальные изменения в DOM, чтобы получилось h1 Привет, Алиса /h1.</p>
      <p>Примечание: Всегда называйте компоненты с заглавной буквы.

        Если компонент начинается с маленькой буквы, React принимает его за DOM-тег. Например, div/ это div-тег из HTML, а Welcome/ это уже наш компонент Welcome, который должен быть в области видимости.

        Чтобы узнать больше про это соглашение, прочитайте Углублённое изучение JSX.</p>



    </div>
  )
}
export default Component;