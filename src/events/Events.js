import React from 'react';


function Events() {
  return (
    <div>
      <h1>Обработка событий</h1>

      <p>Обработка событий в React-элементах очень похожа на обработку событий в DOM-элементах. Но есть несколько синтаксических отличий:</p>

      <p>События в React именуются в стиле camelCase вместо нижнего регистра.
        С JSX вы передаёте функцию как обработчик события вместо строки.</p>
      <p>Например, в HTML:</p>
      <pre>{`
<button onclick="activateLasers()">
Активировать лазеры
</button>
`}</pre>

      <p>В React немного иначе:</p>
      <pre>{`
<button onClick={activateLasers}>
Активировать лазеры
</button>
`}</pre>

      <p>Ещё одно отличие — в React нельзя предотвратить обработчик события по умолчанию, вернув false. Нужно явно вызвать preventDefault. Например, в обычном HTML для отмены отправки формы (действие по умолчанию) можно написать:</p>
      <pre>{`
<form onsubmit="console.log('Отправлена форма.'); return false">
<button type="submit">Отправить</button>
</form>
`}</pre>

      <p>В React это будет выглядеть так:</p>
      <pre>{`
function Form() {
    function handleSubmit(e) {
      e.preventDefault();
      console.log('Отправлена форма.');
    }
  
    return (
      <form onSubmit={handleSubmit}>
        <button type="submit">Отправить</button>
      </form>
    );
  }
`}</pre>

      <p>В приведённом выше коде e — это синтетическое событие. React определяет синтетические события в соответствии со спецификацией W3C, поэтому не волнуйтесь о кроссбраузерности. События React работают не совсем как нативные. Изучите руководство о SyntheticEvent, чтобы узнать о них больше.</p>
      <p>При использовании React обычно не нужно вызывать addEventListener, чтобы добавить обработчики в DOM-элемент после его создания. Вместо этого добавьте обработчик сразу после того, как элемент отрендерился.</p>
      <p>В компоненте, определённом с помощью ES6-класса, в качестве обработчика события обычно выступает один из методов класса. Например, этот компонент Toggle рендерит кнопку, которая позволяет пользователю переключать состояния между «Включено» и «Выключено»:</p>

      <h2>Передача аргументов в обработчики событий</h2>

      <p>Внутри цикла часто нужно передать дополнительный аргумент в обработчик события. Например, если id — это идентификатор строки, можно использовать следующие варианты:</p>
      <pre>{`
<button onClick={(e) => this.deleteRow(id, e)}>Удалить строку</button>
<button onClick={this.deleteRow.bind(this, id)}>Удалить строку</button>
`}</pre>

      <p>Две строки выше — эквивалентны, и используют стрелочные функции и Function.prototype.bind соответственно.</p>
      <p>В обоих случаях аргумент e, представляющий событие React, будет передан как второй аргумент после идентификатора. Используя стрелочную функцию, необходимо передавать аргумент явно, но с bind любые последующие аргументы передаются автоматически.</p>

    </div>
  )
}
export default Events;